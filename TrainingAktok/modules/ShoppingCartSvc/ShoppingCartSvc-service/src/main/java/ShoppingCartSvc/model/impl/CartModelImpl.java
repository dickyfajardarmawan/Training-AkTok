/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ShoppingCartSvc.model.impl;

import ShoppingCartSvc.model.Cart;
import ShoppingCartSvc.model.CartModel;
import ShoppingCartSvc.model.CartSoap;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Cart service. Represents a row in the &quot;master_Cart&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CartModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CartImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CartImpl
 * @see Cart
 * @see CartModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CartModelImpl extends BaseModelImpl<Cart> implements CartModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cart model instance should use the {@link Cart} interface instead.
	 */
	public static final String TABLE_NAME = "master_Cart";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "id_cart", Types.VARCHAR },
			{ "id_produk", Types.VARCHAR },
			{ "id_toko", Types.VARCHAR },
			{ "jumlah_produk", Types.BIGINT },
			{ "sub_total", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_cart", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_produk", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_toko", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jumlah_produk", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sub_total", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table master_Cart (uuid_ VARCHAR(75) null,id_cart VARCHAR(75) not null primary key,id_produk VARCHAR(75) null,id_toko VARCHAR(75) null,jumlah_produk LONG,sub_total LONG)";
	public static final String TABLE_SQL_DROP = "drop table master_Cart";
	public static final String ORDER_BY_JPQL = " ORDER BY cart.id_cart ASC";
	public static final String ORDER_BY_SQL = " ORDER BY master_Cart.id_cart ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(ShoppingCartSvc.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.ShoppingCartSvc.model.Cart"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(ShoppingCartSvc.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.ShoppingCartSvc.model.Cart"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(ShoppingCartSvc.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.ShoppingCartSvc.model.Cart"),
			true);
	public static final long UUID_COLUMN_BITMASK = 1L;
	public static final long ID_CART_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Cart toModel(CartSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Cart model = new CartImpl();

		model.setUuid(soapModel.getUuid());
		model.setId_cart(soapModel.getId_cart());
		model.setId_produk(soapModel.getId_produk());
		model.setId_toko(soapModel.getId_toko());
		model.setJumlah_produk(soapModel.getJumlah_produk());
		model.setSub_total(soapModel.getSub_total());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Cart> toModels(CartSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Cart> models = new ArrayList<Cart>(soapModels.length);

		for (CartSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(ShoppingCartSvc.service.util.ServiceProps.get(
				"lock.expiration.time.ShoppingCartSvc.model.Cart"));

	public CartModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _id_cart;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setId_cart(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id_cart;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Cart.class;
	}

	@Override
	public String getModelClassName() {
		return Cart.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("id_cart", getId_cart());
		attributes.put("id_produk", getId_produk());
		attributes.put("id_toko", getId_toko());
		attributes.put("jumlah_produk", getJumlah_produk());
		attributes.put("sub_total", getSub_total());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		String id_cart = (String)attributes.get("id_cart");

		if (id_cart != null) {
			setId_cart(id_cart);
		}

		String id_produk = (String)attributes.get("id_produk");

		if (id_produk != null) {
			setId_produk(id_produk);
		}

		String id_toko = (String)attributes.get("id_toko");

		if (id_toko != null) {
			setId_toko(id_toko);
		}

		Long jumlah_produk = (Long)attributes.get("jumlah_produk");

		if (jumlah_produk != null) {
			setJumlah_produk(jumlah_produk);
		}

		Long sub_total = (Long)attributes.get("sub_total");

		if (sub_total != null) {
			setSub_total(sub_total);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public String getId_cart() {
		if (_id_cart == null) {
			return "";
		}
		else {
			return _id_cart;
		}
	}

	@Override
	public void setId_cart(String id_cart) {
		_id_cart = id_cart;
	}

	@JSON
	@Override
	public String getId_produk() {
		if (_id_produk == null) {
			return "";
		}
		else {
			return _id_produk;
		}
	}

	@Override
	public void setId_produk(String id_produk) {
		_id_produk = id_produk;
	}

	@JSON
	@Override
	public String getId_toko() {
		if (_id_toko == null) {
			return "";
		}
		else {
			return _id_toko;
		}
	}

	@Override
	public void setId_toko(String id_toko) {
		_id_toko = id_toko;
	}

	@JSON
	@Override
	public long getJumlah_produk() {
		return _jumlah_produk;
	}

	@Override
	public void setJumlah_produk(long jumlah_produk) {
		_jumlah_produk = jumlah_produk;
	}

	@JSON
	@Override
	public long getSub_total() {
		return _sub_total;
	}

	@Override
	public void setSub_total(long sub_total) {
		_sub_total = sub_total;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Cart toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Cart)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CartImpl cartImpl = new CartImpl();

		cartImpl.setUuid(getUuid());
		cartImpl.setId_cart(getId_cart());
		cartImpl.setId_produk(getId_produk());
		cartImpl.setId_toko(getId_toko());
		cartImpl.setJumlah_produk(getJumlah_produk());
		cartImpl.setSub_total(getSub_total());

		cartImpl.resetOriginalValues();

		return cartImpl;
	}

	@Override
	public int compareTo(Cart cart) {
		String primaryKey = cart.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Cart)) {
			return false;
		}

		Cart cart = (Cart)obj;

		String primaryKey = cart.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CartModelImpl cartModelImpl = this;

		cartModelImpl._originalUuid = cartModelImpl._uuid;

		cartModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Cart> toCacheModel() {
		CartCacheModel cartCacheModel = new CartCacheModel();

		cartCacheModel.uuid = getUuid();

		String uuid = cartCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			cartCacheModel.uuid = null;
		}

		cartCacheModel.id_cart = getId_cart();

		String id_cart = cartCacheModel.id_cart;

		if ((id_cart != null) && (id_cart.length() == 0)) {
			cartCacheModel.id_cart = null;
		}

		cartCacheModel.id_produk = getId_produk();

		String id_produk = cartCacheModel.id_produk;

		if ((id_produk != null) && (id_produk.length() == 0)) {
			cartCacheModel.id_produk = null;
		}

		cartCacheModel.id_toko = getId_toko();

		String id_toko = cartCacheModel.id_toko;

		if ((id_toko != null) && (id_toko.length() == 0)) {
			cartCacheModel.id_toko = null;
		}

		cartCacheModel.jumlah_produk = getJumlah_produk();

		cartCacheModel.sub_total = getSub_total();

		return cartCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", id_cart=");
		sb.append(getId_cart());
		sb.append(", id_produk=");
		sb.append(getId_produk());
		sb.append(", id_toko=");
		sb.append(getId_toko());
		sb.append(", jumlah_produk=");
		sb.append(getJumlah_produk());
		sb.append(", sub_total=");
		sb.append(getSub_total());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("ShoppingCartSvc.model.Cart");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_cart</column-name><column-value><![CDATA[");
		sb.append(getId_cart());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_produk</column-name><column-value><![CDATA[");
		sb.append(getId_produk());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_toko</column-name><column-value><![CDATA[");
		sb.append(getId_toko());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jumlah_produk</column-name><column-value><![CDATA[");
		sb.append(getJumlah_produk());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sub_total</column-name><column-value><![CDATA[");
		sb.append(getSub_total());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Cart.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Cart.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private String _id_cart;
	private String _id_produk;
	private String _id_toko;
	private long _jumlah_produk;
	private long _sub_total;
	private long _columnBitmask;
	private Cart _escapedModel;
}