/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package TokoSvc.model.impl;

import TokoSvc.model.Toko;
import TokoSvc.model.TokoModel;
import TokoSvc.model.TokoSoap;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Toko service. Represents a row in the &quot;master_Toko&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link TokoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TokoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TokoImpl
 * @see Toko
 * @see TokoModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class TokoModelImpl extends BaseModelImpl<Toko> implements TokoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a toko model instance should use the {@link Toko} interface instead.
	 */
	public static final String TABLE_NAME = "master_Toko";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "id_toko", Types.VARCHAR },
			{ "nama_toko", Types.VARCHAR },
			{ "nama_depan_pemilik", Types.VARCHAR },
			{ "nama_belakang_pemilik", Types.VARCHAR },
			{ "nomor_hp", Types.BIGINT },
			{ "status_toko", Types.BIGINT },
			{ "tanggal_pendaftaran", Types.TIMESTAMP },
			{ "password_", Types.VARCHAR },
			{ "pin", Types.BIGINT },
			{ "id_distributor", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_toko", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nama_toko", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nama_depan_pemilik", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nama_belakang_pemilik", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nomor_hp", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status_toko", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tanggal_pendaftaran", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("password_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pin", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("id_distributor", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table master_Toko (uuid_ VARCHAR(75) null,id_toko VARCHAR(75) not null primary key,nama_toko VARCHAR(75) null,nama_depan_pemilik VARCHAR(75) null,nama_belakang_pemilik VARCHAR(75) null,nomor_hp LONG,status_toko LONG,tanggal_pendaftaran DATE null,password_ VARCHAR(75) null,pin LONG,id_distributor VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table master_Toko";
	public static final String ORDER_BY_JPQL = " ORDER BY toko.id_toko ASC";
	public static final String ORDER_BY_SQL = " ORDER BY master_Toko.id_toko ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(TokoSvc.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.TokoSvc.model.Toko"), true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(TokoSvc.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.TokoSvc.model.Toko"), true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(TokoSvc.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.TokoSvc.model.Toko"), true);
	public static final long UUID_COLUMN_BITMASK = 1L;
	public static final long ID_TOKO_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Toko toModel(TokoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Toko model = new TokoImpl();

		model.setUuid(soapModel.getUuid());
		model.setId_toko(soapModel.getId_toko());
		model.setNama_toko(soapModel.getNama_toko());
		model.setNama_depan_pemilik(soapModel.getNama_depan_pemilik());
		model.setNama_belakang_pemilik(soapModel.getNama_belakang_pemilik());
		model.setNomor_hp(soapModel.getNomor_hp());
		model.setStatus_toko(soapModel.getStatus_toko());
		model.setTanggal_pendaftaran(soapModel.getTanggal_pendaftaran());
		model.setPassword(soapModel.getPassword());
		model.setPin(soapModel.getPin());
		model.setId_distributor(soapModel.getId_distributor());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Toko> toModels(TokoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Toko> models = new ArrayList<Toko>(soapModels.length);

		for (TokoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(TokoSvc.service.util.ServiceProps.get(
				"lock.expiration.time.TokoSvc.model.Toko"));

	public TokoModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _id_toko;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setId_toko(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id_toko;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Toko.class;
	}

	@Override
	public String getModelClassName() {
		return Toko.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("id_toko", getId_toko());
		attributes.put("nama_toko", getNama_toko());
		attributes.put("nama_depan_pemilik", getNama_depan_pemilik());
		attributes.put("nama_belakang_pemilik", getNama_belakang_pemilik());
		attributes.put("nomor_hp", getNomor_hp());
		attributes.put("status_toko", getStatus_toko());
		attributes.put("tanggal_pendaftaran", getTanggal_pendaftaran());
		attributes.put("password", getPassword());
		attributes.put("pin", getPin());
		attributes.put("id_distributor", getId_distributor());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		String id_toko = (String)attributes.get("id_toko");

		if (id_toko != null) {
			setId_toko(id_toko);
		}

		String nama_toko = (String)attributes.get("nama_toko");

		if (nama_toko != null) {
			setNama_toko(nama_toko);
		}

		String nama_depan_pemilik = (String)attributes.get("nama_depan_pemilik");

		if (nama_depan_pemilik != null) {
			setNama_depan_pemilik(nama_depan_pemilik);
		}

		String nama_belakang_pemilik = (String)attributes.get(
				"nama_belakang_pemilik");

		if (nama_belakang_pemilik != null) {
			setNama_belakang_pemilik(nama_belakang_pemilik);
		}

		Long nomor_hp = (Long)attributes.get("nomor_hp");

		if (nomor_hp != null) {
			setNomor_hp(nomor_hp);
		}

		Long status_toko = (Long)attributes.get("status_toko");

		if (status_toko != null) {
			setStatus_toko(status_toko);
		}

		Date tanggal_pendaftaran = (Date)attributes.get("tanggal_pendaftaran");

		if (tanggal_pendaftaran != null) {
			setTanggal_pendaftaran(tanggal_pendaftaran);
		}

		String password = (String)attributes.get("password");

		if (password != null) {
			setPassword(password);
		}

		Long pin = (Long)attributes.get("pin");

		if (pin != null) {
			setPin(pin);
		}

		String id_distributor = (String)attributes.get("id_distributor");

		if (id_distributor != null) {
			setId_distributor(id_distributor);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public String getId_toko() {
		if (_id_toko == null) {
			return "";
		}
		else {
			return _id_toko;
		}
	}

	@Override
	public void setId_toko(String id_toko) {
		_id_toko = id_toko;
	}

	@JSON
	@Override
	public String getNama_toko() {
		if (_nama_toko == null) {
			return "";
		}
		else {
			return _nama_toko;
		}
	}

	@Override
	public void setNama_toko(String nama_toko) {
		_nama_toko = nama_toko;
	}

	@JSON
	@Override
	public String getNama_depan_pemilik() {
		if (_nama_depan_pemilik == null) {
			return "";
		}
		else {
			return _nama_depan_pemilik;
		}
	}

	@Override
	public void setNama_depan_pemilik(String nama_depan_pemilik) {
		_nama_depan_pemilik = nama_depan_pemilik;
	}

	@JSON
	@Override
	public String getNama_belakang_pemilik() {
		if (_nama_belakang_pemilik == null) {
			return "";
		}
		else {
			return _nama_belakang_pemilik;
		}
	}

	@Override
	public void setNama_belakang_pemilik(String nama_belakang_pemilik) {
		_nama_belakang_pemilik = nama_belakang_pemilik;
	}

	@JSON
	@Override
	public long getNomor_hp() {
		return _nomor_hp;
	}

	@Override
	public void setNomor_hp(long nomor_hp) {
		_nomor_hp = nomor_hp;
	}

	@JSON
	@Override
	public long getStatus_toko() {
		return _status_toko;
	}

	@Override
	public void setStatus_toko(long status_toko) {
		_status_toko = status_toko;
	}

	@JSON
	@Override
	public Date getTanggal_pendaftaran() {
		return _tanggal_pendaftaran;
	}

	@Override
	public void setTanggal_pendaftaran(Date tanggal_pendaftaran) {
		_tanggal_pendaftaran = tanggal_pendaftaran;
	}

	@JSON
	@Override
	public String getPassword() {
		if (_password == null) {
			return "";
		}
		else {
			return _password;
		}
	}

	@Override
	public void setPassword(String password) {
		_password = password;
	}

	@JSON
	@Override
	public long getPin() {
		return _pin;
	}

	@Override
	public void setPin(long pin) {
		_pin = pin;
	}

	@JSON
	@Override
	public String getId_distributor() {
		if (_id_distributor == null) {
			return "";
		}
		else {
			return _id_distributor;
		}
	}

	@Override
	public void setId_distributor(String id_distributor) {
		_id_distributor = id_distributor;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Toko toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Toko)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TokoImpl tokoImpl = new TokoImpl();

		tokoImpl.setUuid(getUuid());
		tokoImpl.setId_toko(getId_toko());
		tokoImpl.setNama_toko(getNama_toko());
		tokoImpl.setNama_depan_pemilik(getNama_depan_pemilik());
		tokoImpl.setNama_belakang_pemilik(getNama_belakang_pemilik());
		tokoImpl.setNomor_hp(getNomor_hp());
		tokoImpl.setStatus_toko(getStatus_toko());
		tokoImpl.setTanggal_pendaftaran(getTanggal_pendaftaran());
		tokoImpl.setPassword(getPassword());
		tokoImpl.setPin(getPin());
		tokoImpl.setId_distributor(getId_distributor());

		tokoImpl.resetOriginalValues();

		return tokoImpl;
	}

	@Override
	public int compareTo(Toko toko) {
		String primaryKey = toko.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Toko)) {
			return false;
		}

		Toko toko = (Toko)obj;

		String primaryKey = toko.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		TokoModelImpl tokoModelImpl = this;

		tokoModelImpl._originalUuid = tokoModelImpl._uuid;

		tokoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Toko> toCacheModel() {
		TokoCacheModel tokoCacheModel = new TokoCacheModel();

		tokoCacheModel.uuid = getUuid();

		String uuid = tokoCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			tokoCacheModel.uuid = null;
		}

		tokoCacheModel.id_toko = getId_toko();

		String id_toko = tokoCacheModel.id_toko;

		if ((id_toko != null) && (id_toko.length() == 0)) {
			tokoCacheModel.id_toko = null;
		}

		tokoCacheModel.nama_toko = getNama_toko();

		String nama_toko = tokoCacheModel.nama_toko;

		if ((nama_toko != null) && (nama_toko.length() == 0)) {
			tokoCacheModel.nama_toko = null;
		}

		tokoCacheModel.nama_depan_pemilik = getNama_depan_pemilik();

		String nama_depan_pemilik = tokoCacheModel.nama_depan_pemilik;

		if ((nama_depan_pemilik != null) && (nama_depan_pemilik.length() == 0)) {
			tokoCacheModel.nama_depan_pemilik = null;
		}

		tokoCacheModel.nama_belakang_pemilik = getNama_belakang_pemilik();

		String nama_belakang_pemilik = tokoCacheModel.nama_belakang_pemilik;

		if ((nama_belakang_pemilik != null) &&
				(nama_belakang_pemilik.length() == 0)) {
			tokoCacheModel.nama_belakang_pemilik = null;
		}

		tokoCacheModel.nomor_hp = getNomor_hp();

		tokoCacheModel.status_toko = getStatus_toko();

		Date tanggal_pendaftaran = getTanggal_pendaftaran();

		if (tanggal_pendaftaran != null) {
			tokoCacheModel.tanggal_pendaftaran = tanggal_pendaftaran.getTime();
		}
		else {
			tokoCacheModel.tanggal_pendaftaran = Long.MIN_VALUE;
		}

		tokoCacheModel.password = getPassword();

		String password = tokoCacheModel.password;

		if ((password != null) && (password.length() == 0)) {
			tokoCacheModel.password = null;
		}

		tokoCacheModel.pin = getPin();

		tokoCacheModel.id_distributor = getId_distributor();

		String id_distributor = tokoCacheModel.id_distributor;

		if ((id_distributor != null) && (id_distributor.length() == 0)) {
			tokoCacheModel.id_distributor = null;
		}

		return tokoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", id_toko=");
		sb.append(getId_toko());
		sb.append(", nama_toko=");
		sb.append(getNama_toko());
		sb.append(", nama_depan_pemilik=");
		sb.append(getNama_depan_pemilik());
		sb.append(", nama_belakang_pemilik=");
		sb.append(getNama_belakang_pemilik());
		sb.append(", nomor_hp=");
		sb.append(getNomor_hp());
		sb.append(", status_toko=");
		sb.append(getStatus_toko());
		sb.append(", tanggal_pendaftaran=");
		sb.append(getTanggal_pendaftaran());
		sb.append(", password=");
		sb.append(getPassword());
		sb.append(", pin=");
		sb.append(getPin());
		sb.append(", id_distributor=");
		sb.append(getId_distributor());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("TokoSvc.model.Toko");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_toko</column-name><column-value><![CDATA[");
		sb.append(getId_toko());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nama_toko</column-name><column-value><![CDATA[");
		sb.append(getNama_toko());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nama_depan_pemilik</column-name><column-value><![CDATA[");
		sb.append(getNama_depan_pemilik());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nama_belakang_pemilik</column-name><column-value><![CDATA[");
		sb.append(getNama_belakang_pemilik());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nomor_hp</column-name><column-value><![CDATA[");
		sb.append(getNomor_hp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status_toko</column-name><column-value><![CDATA[");
		sb.append(getStatus_toko());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tanggal_pendaftaran</column-name><column-value><![CDATA[");
		sb.append(getTanggal_pendaftaran());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>password</column-name><column-value><![CDATA[");
		sb.append(getPassword());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pin</column-name><column-value><![CDATA[");
		sb.append(getPin());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_distributor</column-name><column-value><![CDATA[");
		sb.append(getId_distributor());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Toko.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Toko.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private String _id_toko;
	private String _nama_toko;
	private String _nama_depan_pemilik;
	private String _nama_belakang_pemilik;
	private long _nomor_hp;
	private long _status_toko;
	private Date _tanggal_pendaftaran;
	private String _password;
	private long _pin;
	private String _id_distributor;
	private long _columnBitmask;
	private Toko _escapedModel;
}