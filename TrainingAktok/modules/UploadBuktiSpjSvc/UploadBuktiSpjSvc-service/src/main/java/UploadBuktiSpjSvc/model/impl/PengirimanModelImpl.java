/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package UploadBuktiSpjSvc.model.impl;

import UploadBuktiSpjSvc.model.Pengiriman;
import UploadBuktiSpjSvc.model.PengirimanModel;
import UploadBuktiSpjSvc.model.PengirimanSoap;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Pengiriman service. Represents a row in the &quot;master_Pengiriman&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link PengirimanModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PengirimanImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PengirimanImpl
 * @see Pengiriman
 * @see PengirimanModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class PengirimanModelImpl extends BaseModelImpl<Pengiriman>
	implements PengirimanModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a pengiriman model instance should use the {@link Pengiriman} interface instead.
	 */
	public static final String TABLE_NAME = "master_Pengiriman";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "id_pengiriman", Types.VARCHAR },
			{ "tanggal_pengiriman", Types.TIMESTAMP },
			{ "status_pengiriman", Types.VARCHAR },
			{ "tanggal_penerimaan", Types.TIMESTAMP },
			{ "bukti_pengiriman", Types.VARCHAR },
			{ "create_date", Types.TIMESTAMP },
			{ "modified_date", Types.TIMESTAMP },
			{ "id_order", Types.VARCHAR },
			{ "id_toko", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_pengiriman", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tanggal_pengiriman", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status_pengiriman", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tanggal_penerimaan", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("bukti_pengiriman", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("create_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modified_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("id_order", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_toko", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table master_Pengiriman (uuid_ VARCHAR(75) null,id_pengiriman VARCHAR(75) not null primary key,tanggal_pengiriman DATE null,status_pengiriman VARCHAR(75) null,tanggal_penerimaan DATE null,bukti_pengiriman VARCHAR(75) null,create_date DATE null,modified_date DATE null,id_order VARCHAR(75) null,id_toko VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table master_Pengiriman";
	public static final String ORDER_BY_JPQL = " ORDER BY pengiriman.id_pengiriman ASC";
	public static final String ORDER_BY_SQL = " ORDER BY master_Pengiriman.id_pengiriman ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(UploadBuktiSpjSvc.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.UploadBuktiSpjSvc.model.Pengiriman"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(UploadBuktiSpjSvc.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.UploadBuktiSpjSvc.model.Pengiriman"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(UploadBuktiSpjSvc.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.UploadBuktiSpjSvc.model.Pengiriman"),
			true);
	public static final long UUID_COLUMN_BITMASK = 1L;
	public static final long ID_PENGIRIMAN_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Pengiriman toModel(PengirimanSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Pengiriman model = new PengirimanImpl();

		model.setUuid(soapModel.getUuid());
		model.setId_pengiriman(soapModel.getId_pengiriman());
		model.setTanggal_pengiriman(soapModel.getTanggal_pengiriman());
		model.setStatus_pengiriman(soapModel.getStatus_pengiriman());
		model.setTanggal_penerimaan(soapModel.getTanggal_penerimaan());
		model.setBukti_pengiriman(soapModel.getBukti_pengiriman());
		model.setCreate_date(soapModel.getCreate_date());
		model.setModified_date(soapModel.getModified_date());
		model.setId_order(soapModel.getId_order());
		model.setId_toko(soapModel.getId_toko());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Pengiriman> toModels(PengirimanSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Pengiriman> models = new ArrayList<Pengiriman>(soapModels.length);

		for (PengirimanSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(UploadBuktiSpjSvc.service.util.ServiceProps.get(
				"lock.expiration.time.UploadBuktiSpjSvc.model.Pengiriman"));

	public PengirimanModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _id_pengiriman;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setId_pengiriman(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id_pengiriman;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Pengiriman.class;
	}

	@Override
	public String getModelClassName() {
		return Pengiriman.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("id_pengiriman", getId_pengiriman());
		attributes.put("tanggal_pengiriman", getTanggal_pengiriman());
		attributes.put("status_pengiriman", getStatus_pengiriman());
		attributes.put("tanggal_penerimaan", getTanggal_penerimaan());
		attributes.put("bukti_pengiriman", getBukti_pengiriman());
		attributes.put("create_date", getCreate_date());
		attributes.put("modified_date", getModified_date());
		attributes.put("id_order", getId_order());
		attributes.put("id_toko", getId_toko());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		String id_pengiriman = (String)attributes.get("id_pengiriman");

		if (id_pengiriman != null) {
			setId_pengiriman(id_pengiriman);
		}

		Date tanggal_pengiriman = (Date)attributes.get("tanggal_pengiriman");

		if (tanggal_pengiriman != null) {
			setTanggal_pengiriman(tanggal_pengiriman);
		}

		String status_pengiriman = (String)attributes.get("status_pengiriman");

		if (status_pengiriman != null) {
			setStatus_pengiriman(status_pengiriman);
		}

		Date tanggal_penerimaan = (Date)attributes.get("tanggal_penerimaan");

		if (tanggal_penerimaan != null) {
			setTanggal_penerimaan(tanggal_penerimaan);
		}

		String bukti_pengiriman = (String)attributes.get("bukti_pengiriman");

		if (bukti_pengiriman != null) {
			setBukti_pengiriman(bukti_pengiriman);
		}

		Date create_date = (Date)attributes.get("create_date");

		if (create_date != null) {
			setCreate_date(create_date);
		}

		Date modified_date = (Date)attributes.get("modified_date");

		if (modified_date != null) {
			setModified_date(modified_date);
		}

		String id_order = (String)attributes.get("id_order");

		if (id_order != null) {
			setId_order(id_order);
		}

		String id_toko = (String)attributes.get("id_toko");

		if (id_toko != null) {
			setId_toko(id_toko);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public String getId_pengiriman() {
		if (_id_pengiriman == null) {
			return "";
		}
		else {
			return _id_pengiriman;
		}
	}

	@Override
	public void setId_pengiriman(String id_pengiriman) {
		_id_pengiriman = id_pengiriman;
	}

	@JSON
	@Override
	public Date getTanggal_pengiriman() {
		return _tanggal_pengiriman;
	}

	@Override
	public void setTanggal_pengiriman(Date tanggal_pengiriman) {
		_tanggal_pengiriman = tanggal_pengiriman;
	}

	@JSON
	@Override
	public String getStatus_pengiriman() {
		if (_status_pengiriman == null) {
			return "";
		}
		else {
			return _status_pengiriman;
		}
	}

	@Override
	public void setStatus_pengiriman(String status_pengiriman) {
		_status_pengiriman = status_pengiriman;
	}

	@JSON
	@Override
	public Date getTanggal_penerimaan() {
		return _tanggal_penerimaan;
	}

	@Override
	public void setTanggal_penerimaan(Date tanggal_penerimaan) {
		_tanggal_penerimaan = tanggal_penerimaan;
	}

	@JSON
	@Override
	public String getBukti_pengiriman() {
		if (_bukti_pengiriman == null) {
			return "";
		}
		else {
			return _bukti_pengiriman;
		}
	}

	@Override
	public void setBukti_pengiriman(String bukti_pengiriman) {
		_bukti_pengiriman = bukti_pengiriman;
	}

	@JSON
	@Override
	public Date getCreate_date() {
		return _create_date;
	}

	@Override
	public void setCreate_date(Date create_date) {
		_create_date = create_date;
	}

	@JSON
	@Override
	public Date getModified_date() {
		return _modified_date;
	}

	@Override
	public void setModified_date(Date modified_date) {
		_modified_date = modified_date;
	}

	@JSON
	@Override
	public String getId_order() {
		if (_id_order == null) {
			return "";
		}
		else {
			return _id_order;
		}
	}

	@Override
	public void setId_order(String id_order) {
		_id_order = id_order;
	}

	@JSON
	@Override
	public String getId_toko() {
		if (_id_toko == null) {
			return "";
		}
		else {
			return _id_toko;
		}
	}

	@Override
	public void setId_toko(String id_toko) {
		_id_toko = id_toko;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Pengiriman toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Pengiriman)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PengirimanImpl pengirimanImpl = new PengirimanImpl();

		pengirimanImpl.setUuid(getUuid());
		pengirimanImpl.setId_pengiriman(getId_pengiriman());
		pengirimanImpl.setTanggal_pengiriman(getTanggal_pengiriman());
		pengirimanImpl.setStatus_pengiriman(getStatus_pengiriman());
		pengirimanImpl.setTanggal_penerimaan(getTanggal_penerimaan());
		pengirimanImpl.setBukti_pengiriman(getBukti_pengiriman());
		pengirimanImpl.setCreate_date(getCreate_date());
		pengirimanImpl.setModified_date(getModified_date());
		pengirimanImpl.setId_order(getId_order());
		pengirimanImpl.setId_toko(getId_toko());

		pengirimanImpl.resetOriginalValues();

		return pengirimanImpl;
	}

	@Override
	public int compareTo(Pengiriman pengiriman) {
		String primaryKey = pengiriman.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Pengiriman)) {
			return false;
		}

		Pengiriman pengiriman = (Pengiriman)obj;

		String primaryKey = pengiriman.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		PengirimanModelImpl pengirimanModelImpl = this;

		pengirimanModelImpl._originalUuid = pengirimanModelImpl._uuid;

		pengirimanModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Pengiriman> toCacheModel() {
		PengirimanCacheModel pengirimanCacheModel = new PengirimanCacheModel();

		pengirimanCacheModel.uuid = getUuid();

		String uuid = pengirimanCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			pengirimanCacheModel.uuid = null;
		}

		pengirimanCacheModel.id_pengiriman = getId_pengiriman();

		String id_pengiriman = pengirimanCacheModel.id_pengiriman;

		if ((id_pengiriman != null) && (id_pengiriman.length() == 0)) {
			pengirimanCacheModel.id_pengiriman = null;
		}

		Date tanggal_pengiriman = getTanggal_pengiriman();

		if (tanggal_pengiriman != null) {
			pengirimanCacheModel.tanggal_pengiriman = tanggal_pengiriman.getTime();
		}
		else {
			pengirimanCacheModel.tanggal_pengiriman = Long.MIN_VALUE;
		}

		pengirimanCacheModel.status_pengiriman = getStatus_pengiriman();

		String status_pengiriman = pengirimanCacheModel.status_pengiriman;

		if ((status_pengiriman != null) && (status_pengiriman.length() == 0)) {
			pengirimanCacheModel.status_pengiriman = null;
		}

		Date tanggal_penerimaan = getTanggal_penerimaan();

		if (tanggal_penerimaan != null) {
			pengirimanCacheModel.tanggal_penerimaan = tanggal_penerimaan.getTime();
		}
		else {
			pengirimanCacheModel.tanggal_penerimaan = Long.MIN_VALUE;
		}

		pengirimanCacheModel.bukti_pengiriman = getBukti_pengiriman();

		String bukti_pengiriman = pengirimanCacheModel.bukti_pengiriman;

		if ((bukti_pengiriman != null) && (bukti_pengiriman.length() == 0)) {
			pengirimanCacheModel.bukti_pengiriman = null;
		}

		Date create_date = getCreate_date();

		if (create_date != null) {
			pengirimanCacheModel.create_date = create_date.getTime();
		}
		else {
			pengirimanCacheModel.create_date = Long.MIN_VALUE;
		}

		Date modified_date = getModified_date();

		if (modified_date != null) {
			pengirimanCacheModel.modified_date = modified_date.getTime();
		}
		else {
			pengirimanCacheModel.modified_date = Long.MIN_VALUE;
		}

		pengirimanCacheModel.id_order = getId_order();

		String id_order = pengirimanCacheModel.id_order;

		if ((id_order != null) && (id_order.length() == 0)) {
			pengirimanCacheModel.id_order = null;
		}

		pengirimanCacheModel.id_toko = getId_toko();

		String id_toko = pengirimanCacheModel.id_toko;

		if ((id_toko != null) && (id_toko.length() == 0)) {
			pengirimanCacheModel.id_toko = null;
		}

		return pengirimanCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", id_pengiriman=");
		sb.append(getId_pengiriman());
		sb.append(", tanggal_pengiriman=");
		sb.append(getTanggal_pengiriman());
		sb.append(", status_pengiriman=");
		sb.append(getStatus_pengiriman());
		sb.append(", tanggal_penerimaan=");
		sb.append(getTanggal_penerimaan());
		sb.append(", bukti_pengiriman=");
		sb.append(getBukti_pengiriman());
		sb.append(", create_date=");
		sb.append(getCreate_date());
		sb.append(", modified_date=");
		sb.append(getModified_date());
		sb.append(", id_order=");
		sb.append(getId_order());
		sb.append(", id_toko=");
		sb.append(getId_toko());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("UploadBuktiSpjSvc.model.Pengiriman");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_pengiriman</column-name><column-value><![CDATA[");
		sb.append(getId_pengiriman());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tanggal_pengiriman</column-name><column-value><![CDATA[");
		sb.append(getTanggal_pengiriman());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status_pengiriman</column-name><column-value><![CDATA[");
		sb.append(getStatus_pengiriman());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tanggal_penerimaan</column-name><column-value><![CDATA[");
		sb.append(getTanggal_penerimaan());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bukti_pengiriman</column-name><column-value><![CDATA[");
		sb.append(getBukti_pengiriman());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>create_date</column-name><column-value><![CDATA[");
		sb.append(getCreate_date());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modified_date</column-name><column-value><![CDATA[");
		sb.append(getModified_date());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_order</column-name><column-value><![CDATA[");
		sb.append(getId_order());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_toko</column-name><column-value><![CDATA[");
		sb.append(getId_toko());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Pengiriman.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Pengiriman.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private String _id_pengiriman;
	private Date _tanggal_pengiriman;
	private String _status_pengiriman;
	private Date _tanggal_penerimaan;
	private String _bukti_pengiriman;
	private Date _create_date;
	private Date _modified_date;
	private String _id_order;
	private String _id_toko;
	private long _columnBitmask;
	private Pengiriman _escapedModel;
}